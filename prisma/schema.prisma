// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum Role {
  general_user
  admin
}

enum AccountType {
  borrower
  renter
  seller
  all
}

enum STATUS {
  in_process
  on_the_way
  in_rent
  returning
  complete
}

model User {
  id                Int           @id @default(autoincrement())
  email             String        @unique
  password          String
  firstName         String
  lastName          String
  role              String
  Books             Book[]        @relation("Books")
  createdBooks      Book[]        @relation("CreatedBooks")
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @default(now()) @updatedAt
  createdBookGenres BookGeneres[] @relation("GenereCreatedBy")
  phoneNumber String @unique
  accountType AccountType
  preferences  String[]
  borrowRequests BorrowRequest[]
  addresses Address[]
  ordersBooks OrderBook[]
}

model BookGeneres {
  id               Int           @id @default(autoincrement())  // Unique ID for each genre
  name             String        // Name of the genre or subgenre
  shortDescription String        // Short description of the genre or subgenre
  parentId         Int?          // Foreign key for the parent genre (nullable if it's a top-level genre)
  
  // Relation to the parent genre, if it's a subgenre
  parent           BookGeneres?  @relation("SubGeneres", fields: [parentId], references: [id])

  // Relation to subgenres, if the genre has subgenres
  subGeneres       BookGeneres[] @relation("SubGeneres")  // Subgenres of the current genre

  createdBy        User?         @relation("GenereCreatedBy", fields: [createdById], references: [id]) // Creator of the genre
  createdById      Int?          // Foreign key for the user who created this genre

  createdAt        DateTime      @default(now())  // Timestamp of creation
  updatedAt        DateTime      @updatedAt        // Timestamp of last update

  Book             Book[]        // Relation to the Book model, where books belong to this genre
  
}

model Book {
  id            Int         @id @default(autoincrement())
  title         String
  authorName    String
  tags          String[]
  bookGeneres   BookGeneres @relation(fields: [bookGeneresId], references: [id])
  bookGeneresId Int
  user          User?        @relation("Books", fields: [userId], references: [id])
  userId        Int?
  createdBy     User?       @relation("CreatedBooks", fields: [createdById], references: [id])
  createdById   Int?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  subCategoryId String[]
  forRent Boolean @default(false)
  availableForSell Boolean @default(false)
  rentPerDay Decimal @default(0.0)
  price Decimal @default(0.0)
  borrowRequests BorrowRequest[]
  orderBooks OrderBook[]
}

model BorrowRequest {
  id          Int           @id @default(autoincrement())
  userId       Int           @unique
  bookId       Int
  startDate     DateTime
  endDate       DateTime
  status        STATUS 
  createdAt DateTime @default(now())
  updatedAt     DateTime    @updatedAt
  address     Address? 
  user        User      @relation(fields: [userId], references: [id])
  book        Book      @relation(fields: [bookId], references: [id])
}

model OrderBook {
  id          Int           @id @default(autoincrement())
  userId       Int           @unique
  bookId       Int
  startDate     DateTime
  endDate       DateTime
  status        STATUS 
  createdAt DateTime @default(now())
  updatedAt     DateTime    @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  book        Book      @relation(fields: [bookId], references: [id])
  address     Address? 
}

model Discussion {
  id          Int           @id @default(autoincrement())
  userId       Int           
  bookId       Int
  title        String
  content      String
  createdAt DateTime @default(now())
  updatedAt     DateTime    @updatedAt
}

model Comment {
  id          Int           @id @default(autoincrement())
  userId       Int         
  discussionId Int
  content      String
  createdAt DateTime @default(now())
  updatedAt     DateTime    @updatedAt
}

model Address {
  id          Int           @id @default(autoincrement())
  userId       Int         
  street       String
  city         String?
  district        String
  zipCode      String
  latitude String?
  longitude String?
  createdAt DateTime @default(now())
  updatedAt     DateTime    @updatedAt
  borrowRequestId Int? @unique
  borrowRequest   BorrowRequest? @relation(fields: [borrowRequestId], references: [id])
  orderBookId Int? @unique
  user        User      @relation(fields: [userId], references: [id])
  orderBook   OrderBook? @relation(fields: [orderBookId], references: [id])
}
